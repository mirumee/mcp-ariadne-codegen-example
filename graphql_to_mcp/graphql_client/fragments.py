# Generated by ariadne-codegen
# Source: graphql_to_mcp/queries.graphql

from typing import Any, Optional

from pydantic import Field

from .base_model import BaseModel


class Product(BaseModel):
    id: str
    name: str
    description: Optional[Any]
    thumbnail: Optional["ProductThumbnail"]
    slug: str
    external_reference: Optional[str] = Field(alias="externalReference")
    product_type: "ProductProductType" = Field(alias="productType")
    category: Optional["ProductCategory"]
    created: Any
    updated_at: Any = Field(alias="updatedAt")
    pricing: Optional["ProductPricing"]


class ProductThumbnail(BaseModel):
    url: str
    alt: Optional[str]


class ProductProductType(BaseModel):
    id: str
    name: str


class ProductCategory(BaseModel):
    id: str
    name: str


class ProductPricing(BaseModel):
    price_range: Optional["ProductPricingPriceRange"] = Field(alias="priceRange")


class ProductPricingPriceRange(BaseModel):
    start: Optional["ProductPricingPriceRangeStart"]
    stop: Optional["ProductPricingPriceRangeStop"]


class ProductPricingPriceRangeStart(BaseModel):
    gross: "ProductPricingPriceRangeStartGross"


class ProductPricingPriceRangeStartGross(BaseModel):
    currency: str
    amount: float


class ProductPricingPriceRangeStop(BaseModel):
    gross: "ProductPricingPriceRangeStopGross"


class ProductPricingPriceRangeStopGross(BaseModel):
    currency: str
    amount: float


Product.model_rebuild()
