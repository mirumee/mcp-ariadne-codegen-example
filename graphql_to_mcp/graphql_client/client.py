# Generated by ariadne-codegen
# Source: graphql_to_mcp/queries.graphql

from typing import Any, Dict, Optional, Union

from .async_base_client import AsyncBaseClient
from .base_model import UNSET, UnsetType
from .input_types import ProductOrder, ProductWhereInput
from .list_products import ListProducts
from .product_by_id import ProductById
from .product_search import ProductSearch


def gql(q: str) -> str:
    return q


class Client(AsyncBaseClient):
    async def list_products(
        self,
        first: Union[Optional[int], UnsetType] = UNSET,
        after: Union[Optional[str], UnsetType] = UNSET,
        channel: Union[Optional[str], UnsetType] = UNSET,
        where: Union[Optional[ProductWhereInput], UnsetType] = UNSET,
        sort_by: Union[Optional[ProductOrder], UnsetType] = UNSET,
        search: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> ListProducts:
        query = gql(
            """
            query ListProducts($first: Int, $after: String, $channel: String, $where: ProductWhereInput, $sortBy: ProductOrder, $search: String) {
              products(
                first: $first
                after: $after
                channel: $channel
                where: $where
                sortBy: $sortBy
                search: $search
              ) {
                pageInfo {
                  hasNextPage
                  hasPreviousPage
                  startCursor
                  endCursor
                }
                totalCount
                edges {
                  node {
                    ...Product
                  }
                }
              }
            }

            fragment Product on Product {
              id
              name
              description
              thumbnail(size: 1024) {
                url
                alt
              }
              slug
              externalReference
              productType {
                id
                name
              }
              category {
                id
                name
              }
              created
              updatedAt
              pricing {
                priceRange {
                  start {
                    gross {
                      currency
                      amount
                    }
                  }
                  stop {
                    gross {
                      currency
                      amount
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "first": first,
            "after": after,
            "channel": channel,
            "where": where,
            "sortBy": sort_by,
            "search": search,
        }
        response = await self.execute(
            query=query, operation_name="ListProducts", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return ListProducts.model_validate(data)

    async def product_by_id(
        self, id: str, channel: Union[Optional[str], UnsetType] = UNSET, **kwargs: Any
    ) -> ProductById:
        query = gql(
            """
            query ProductById($id: ID!, $channel: String) {
              product(id: $id, channel: $channel) {
                ...Product
              }
            }

            fragment Product on Product {
              id
              name
              description
              thumbnail(size: 1024) {
                url
                alt
              }
              slug
              externalReference
              productType {
                id
                name
              }
              category {
                id
                name
              }
              created
              updatedAt
              pricing {
                priceRange {
                  start {
                    gross {
                      currency
                      amount
                    }
                  }
                  stop {
                    gross {
                      currency
                      amount
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"id": id, "channel": channel}
        response = await self.execute(
            query=query, operation_name="ProductById", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return ProductById.model_validate(data)

    async def product_search(
        self,
        first: int,
        search: str,
        channel: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> ProductSearch:
        query = gql(
            """
            query ProductSearch($first: Int!, $search: String!, $channel: String) {
              products(first: $first, filter: {search: $search}, channel: $channel) {
                edges {
                  node {
                    ...Product
                  }
                }
              }
            }

            fragment Product on Product {
              id
              name
              description
              thumbnail(size: 1024) {
                url
                alt
              }
              slug
              externalReference
              productType {
                id
                name
              }
              category {
                id
                name
              }
              created
              updatedAt
              pricing {
                priceRange {
                  start {
                    gross {
                      currency
                      amount
                    }
                  }
                  stop {
                    gross {
                      currency
                      amount
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "first": first,
            "search": search,
            "channel": channel,
        }
        response = await self.execute(
            query=query, operation_name="ProductSearch", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return ProductSearch.model_validate(data)
